#!/usr/bin/env python3

from multiprocessing import Pool
import sys, time, random, itertools

PROFILE = False
CV2 = True
THREADING = False
STOP_ON_SOLVE = True
PRINT_ALL_TESTS = False
DISPLAY_ALL_TESTS = False
INCLUDE_SWAPS = False  # Should never be True
PRINT_STATUS = True
MULTIPLE_PERM = True

MAX_RECURSION = 950
SMALL_SWAP_LIM = 2000
MED_SWAP_LIM = 1000 # 2000
HARD_SWAP_LIM = 1000000
PERM_WIDTH = 4 # 5

slim = 0
hslim = 0

if CV2:
    import cv2
    import numpy as np

n = 0
wait_key_delay = 300

width = 500
height = 500
maxlat = 0
minlat = float('inf')
maxlon = 0
minlon = float('inf')
latw = 0
lonw = 0

attempts = 0

def readdata():
    raw = open("tsp0734.txt","r").read().split("\n")
    # raw = open("data.txt","r").read().split("\n")
    global n
    global maxlat,minlat,maxlon,minlon,latw,lonw
    n = int(raw[0])
    ret = {}
    for l1,d1 in enumerate(raw[1:]):
        if(d1 == ""): continue
        ret[l1] = {}
        d1 = d1.split(" ")
        ret[l1]['data'] = [float(d) for d in d1]
        maxlat = max(float(d1[0]),maxlat)
        minlat = min(float(d1[0]),minlat)
        maxlon = max(float(d1[1]),maxlon)
        minlon = min(float(d1[1]),minlon)
        for l2,d2 in enumerate(raw[1:]):
            if(d2 == ""): continue
            if l1 == l2: continue
            d2 = d2.split(" ")
            ret[l1][l2] = ((float(d1[0])-float(d2[0]))**2 + (float(d1[1])-float(d2[1]))**2)**.5
    maxlat += 100
    minlat -= 100
    maxlon += 100
    minlon -= 100
    latw = maxlat - minlat
    lonw = maxlon - minlon
    return ret

atc = 0
# MAX = 10000000/2 # < 2.5 GB
MAX = 0
dcache = {}
def dist(l,d):
    td = 0
    for i in range(n-1):
        td += d[int(l[i])][int(l[i+1])]
    td += d[l[n-1]][l[0]]
    return td

    sl = str(l)
    global atc
    if sl not in dcache:
        atc += 1
        td = 0
        for i in range(n-1):
            td += d[int(l[i])][int(l[i+1])]
        td += d[l[n-1]][l[0]]
        if atc > MAX: return td
        dcache[sl] = td
    return dcache[sl]

global mind, minr
mind = float('inf')
minr = []

def swap(g,i,j):
    g[i],g[j] = g[j],g[i]
    return g

def swap_and_return_dist(g,i,j,d):
    if i == j:
        return g,0
    if i > j:i,j=j,i
    g[i],g[j] = g[j],g[i]
    if j-i == 1:
        # return g,d[g[i-1]][g[j]] + d[i][g[j+1-n]] - d[g[i-1]][g[i]] - d[g[j]][g[j+1-n]]
        return g,d[g[i-1]][g[i]] + d[g[j]][g[j+1-n]] - d[g[i-1]][g[j]] - d[g[i]][g[j+1-n]]
    if i == 0 and j == n-1:
        # return g,d[(j-1)][0]+d[j][1]-d[0][1]-d[j-1][j]
        return g,d[g[0]][g[1]]+d[g[j-1]][g[j]]-d[g[j-1]][g[0]]-d[g[j]][g[1]]
        # return g,d[(i-1)%n][j] + d[j][(i+1)%n] + d[(j-1)%n][i] + d[i][(j+1)%n] - d[(j-1)%n][j] - d[j][(j+1)%n] - d[(i-1)%n][i] - d[i][(i+1)%n]
    # return g,d[g[i-1]][g[j]] + d[g[j]][g[i+1-n]] + d[g[j-1]][g[i]] + d[g[i]][g[j+1-n]] - d[g[j-1]][g[j]] - d[g[j]][g[j+1-n]] - d[g[i-1]][g[i]] - d[g[i]][g[i+1-n]]
    return g,d[g[i-1]][g[i]] + d[g[j]][g[j+1-n]] - d[g[i-1]][g[j]] - d[g[i]][g[j+1-n]] + d[g[i]][g[i+1-n]] + d[g[j-1]][g[j]] - d[g[i]][g[j-1]] - d[g[j]][g[i+1-n]]
    # return g,d[g[i-1]][g[i]] + d[g[j]][g[j+1-n]] + d[g[j-1]][g[i]] + d[g[i]][g[j+1-n]] - d[g[j-1]][g[j]] - d[g[j]][g[j+1-n]] - d[g[i-1]][g[i]] - d[g[i]][g[i+1-n]]

def all_swaps(g,d,dis):
    all = []
    for i in range(n-1):
        for j in range(i+1,n):
            res = swap_and_return_dist(g[:],i,j,d)
            all.append((res[0],res[1]+dis))
    return all

def some_swaps(g,md,d):
    some = []
    lim = 0
    hlim = 0
    for k in range(SMALL_SWAP_LIM):
        some.append(swap(g,int(random.random()*n),int(random.random()*n)))
    return some

def best_of_random(g,dis,d):
    global slim, hslim
    # print("Call")
    mg = g
    ld = 0
    for k in range(slim):
        i,j = int(random.random()*n),int(random.random()*n)
        ng,ddist = swap_and_return_dist(g[:],i,j,d)
        """
        if(abs(dist(ng,d) - dist(g,d) - ddist) > .00001):
            print("Distance failed {}:{} {} ({},{})".format(dist(g,d),ddist,dist(ng,d),i,j))
            return
        """
        if ddist < ld:
            mg = ng
            ld = ddist
    if ld < 0:
        """
        if(abs(dist(mg,d) - dist(g,d) - ld) > .00001):
            print("Fail at {}{} {}".format(dist(mg,d),ld,dist(g,d)))
        """
        return (mg,ld+dis)
    for k in range(hslim):
        ng,ddist = swap_and_return_dist(g[:],int(random.random()*n),int(random.random()*n),d)
        if ddist < 0:
            return (ng,dis+ddist)
    return (g,dis)

def untangle(g,i,j,d):
    ng = g[0:i] + g[i:j][::-1] + g[j:]
    ddist = d[ng[i-1]][ng[i]] + d[ng[j-1]][ng[j]] - d[g[i-1]][g[i]] - d[g[j-1]][g[j]]
    return ng, ddist

def runtangle(g,dist,d):
    md = dist
    mg = g
    for k in range(slim):
        i = int(random.random() * n)
        j = int(random.random() * n)
        if i>j:i,j=j,i
        ng,nd = untangle(g,i,j,d)
        if nd+dist < md:
            md = nd+dist
            mg = ng
    return mg,md
def only_one_untangle(g,dist,d):
    md = dist
    mg = g
    for i in range(1,n-2):
        for j in range(i+1,n-1):
            ng,nd = untangle(g,i,j,d)
            if nd+dist < md:
                md = nd+dist
                mg = ng
    return mg,md

def best_permutation(g,dis,d,w):
    mg = g
    md = dis
    tg = mg
    def cdis(l):
        cd = 0
        for i in range(w-1):
            cd += d[l[i]][l[i+1]]
        return cd
    for i in range(-w,n-w-1):
        ltc = tg[i:i+w] if i >= 0 else tg[i:]+tg[:i+w]
        all_p = list(itertools.permutations(ltc))
        bdis = dis
        for j in range(-1,w):
            s = i+j
            bdis -= d[tg[s]][tg[s+1]]
        for p in all_p:
            fp = tg[:i] + list(p) + tg[i+w:]
            td = bdis + d[fp[i-1]][fp[i]] + cdis(p) + d[fp[i+w-1]][fp[i+w]]
            if td < md:
                md = td
                mg = fp
                if MULTIPLE_PERM: tg = mg
    return mg,md
            

def findmin(graph,data,only_use_swaps,recur_num): # PASS IN DIST
    global attempts
    mg = graph
    mdis = dist(graph,data)
    if recur_num > MAX_RECURSION: return mg, mdis
    loop = []
    if not only_use_swaps:
        loop += [only_one_untangle(mg,mdis,data)] + [best_permutation(graph,mdis,data,PERM_WIDTH)]
        # if INCLUDE_SWAPS: loop += all_swaps(graph,data,mdis) :: Dangerous
        if INCLUDE_SWAPS: loop.append(best_of_random(graph,mdis,data))
    else:
        # loop = some_swaps(graph,mdis,data)
        loop = [best_of_random(graph,mdis,data)] + [runtangle(graph,mdis,data)]
    # loop.append(best_permutation(graph,mdis,data))
    # print(loop)
    for s,dis in loop:
        # dis = dist(s,data)
        attempts += 1
        if dis < mdis: # Change for max
            mdis = dis
            mg = s
            if PRINT_ALL_TESTS:
                print(mg)
            if PRINT_STATUS:
                sys.stdout.write("{} {}              \r".format(recur_num,mdis))
                sys.stdout.flush()
            if DISPLAY_ALL_TESTS and CV2:
                display(mg,data,0,0,mdis,"trial")
            # print("Done")
            # display(mg,data,0,0,mdis)
    if mg == graph:
        return graph,mdis
    else:
        return findmin(mg,data,only_use_swaps,recur_num+1)
            
        
def display(mg,d,thd,num,mind,name="trial"):
    onedex = mg.index(0)
    tmg = [mg[onedex-i]+1 for i in range(len(mg))]
    if tmg[-1] < tmg[1]:
        rmg = mg[::-1]
        onedex = rmg.index(0)
        tmg = [rmg[onedex-i]+1 for i in range(len(mg))]
    if name=="best": print("New best: {} {}".format(mind,tmg))
    if CV2:
        img = np.zeros((height,width,3), np.uint8)
        img[:,:] = (255,255,255)
        for i in range(-1,n-1):
            w1 = int(width * (d[mg[i]]['data'][0] - minlat) / latw)
            h1 = int(height * (d[mg[i]]['data'][1] - minlon) / lonw)
            w2 = int(width * (d[mg[i+1]]['data'][0] - minlat) / latw)
            h2 = int(height * (d[mg[i+1]]['data'][1] - minlon) / lonw)
            cv2.line(img,(h1,w1),(h2,w2),(255,0,0),1)
        for i in range(-1,n-1): # Prevent line over circle
            w1 = int(width * (d[mg[i]]['data'][0] - minlat) / latw)
            h1 = int(height * (d[mg[i]]['data'][1] - minlon) / lonw)
            cv2.circle(img,(h1,w1),2,(0,0,0), -1)
        cv2.putText(img,"Distance {} Attempts: {}".format(mind,attempts),(20,20),cv2.FONT_HERSHEY_PLAIN,1,0)
        cv2.imshow(name,img)
        cv2.waitKey(wait_key_delay) # 500
        cv2.imwrite(name+".png",img)

# best = [23, 27, 26, 30, 35, 33, 32, 37, 36, 34, 31, 29, 28, 20, 13, 9, 0, 1, 3, 2, 4, 5, 6, 7, 8, 11, 10, 18, 17, 16, 15, 12, 14, 19, 22, 25, 24, 21]
# best = [233, 235, 251, 260, 264, 300, 304, 279, 271, 267, 266, 276, 283, 273, 243, 230, 226, 219, 223, 238, 242, 250, 234, 232, 229, 206, 198, 185, 199, 149, 158, 175, 177, 178, 167, 166, 159, 155, 136, 130, 118, 111, 106, 110, 113, 116, 129, 138, 154, 174, 188, 202, 165, 148, 134, 153, 152, 173, 145, 137, 121, 105, 93, 86, 77, 98, 102, 95, 96, 81, 63, 31, 29, 32, 34, 36, 47, 51, 56, 58, 60, 87, 88, 89, 69, 61, 48, 41, 37, 64, 70, 107, 103, 112, 124, 131, 133, 139, 141, 156, 160, 162, 150, 204, 146, 142, 97, 91, 68, 59, 54, 50, 42, 28, 30, 19, 13, 8, 12, 11, 9, 7, 3, 4, 6, 1, 0, 2, 5, 10, 17, 15, 26, 46, 79, 80, 85, 90, 114, 126, 92, 83, 84, 78, 76, 45, 44, 35, 21, 24, 20, 18, 16, 14, 22, 23, 25, 27, 33, 38, 39, 65, 55, 40, 43, 49, 52, 53, 62, 66, 57, 67, 75, 74, 73, 72, 71, 99, 94, 82, 125, 119, 120, 123, 122, 104, 108, 109, 117, 132, 180, 181, 208, 212, 255, 246, 256, 228, 239, 241, 247, 270, 313, 325, 324, 321, 312, 288, 280, 245, 262, 269, 261, 295, 316, 294, 268, 252, 236, 214, 191, 183, 170, 169, 186, 195, 211, 194, 190, 179, 168, 164, 161, 189, 207, 265, 244, 291, 293, 305, 311, 342, 330, 351, 364, 380, 394, 400, 386, 371, 352, 337, 336, 347, 374, 373, 383, 418, 425, 411, 401, 356, 378, 420, 448, 454, 459, 471, 462, 472, 482, 480, 500, 514, 519, 521, 518, 512, 508, 517, 526, 543, 538, 542, 550, 558, 557, 590, 613, 622, 632, 631, 621, 617, 584, 575, 571, 612, 629, 601, 566, 579, 589, 620, 611, 616, 588, 583, 574, 578, 610, 600, 599, 577, 570, 561, 580, 576, 585, 606, 636, 641, 649, 663, 664, 670, 658, 662, 657, 654, 642, 639, 630, 608, 628, 643, 644, 645, 650, 665, 671, 677, 684, 687, 694, 700, 703, 707, 708, 704, 695, 686, 690, 696, 714, 720, 719, 718, 730, 729, 727, 717, 709, 712, 728, 732, 731, 726, 725, 716, 713, 706, 701, 702, 699, 697, 705, 721, 715, 710, 698, 689, 685, 680, 673, 681, 653, 659, 668, 656, 676, 672, 661, 646, 648, 647, 679, 688, 683, 669, 655, 675, 674, 652, 638, 634, 635, 596, 581, 582, 625, 597, 586, 560, 549, 524, 520, 505, 490, 483, 504, 501, 486, 476, 456, 436, 430, 432, 429, 440, 416, 404, 405, 372, 358, 362, 382, 379, 376, 375, 388, 355, 349, 353, 366, 381, 397, 398, 390, 393, 403, 426, 465, 455, 443, 424, 444, 427, 428, 419, 408, 473, 468, 470, 531, 495, 527, 546, 553, 567, 595, 568, 602, 640, 660, 667, 678, 692, 682, 693, 723, 733, 722, 711, 691, 651, 666, 633, 565, 594, 564, 593, 607, 592, 548, 544, 545, 552, 539, 523, 481, 515, 530, 494, 466, 467, 460, 463, 451, 439, 414, 402, 387, 392, 395, 406, 396, 384, 360, 357, 308, 317, 301, 296, 292, 284, 277, 278, 302, 318, 326, 348, 361, 365, 314, 281, 248, 220, 209, 203, 227, 221, 213, 196, 192, 184, 187, 171, 157, 163, 143, 135, 115, 127, 101, 100, 128, 140, 144, 147, 151, 176, 172, 201, 182, 193, 218, 222, 224, 231, 237, 254, 217, 216, 210, 200, 197, 205, 215, 249, 253, 257, 274, 306, 319, 307, 282, 285, 289, 286, 258, 287, 298, 310, 332, 346, 343, 303, 272, 259, 275, 225, 240, 263, 290, 309, 322, 340, 354, 350, 341, 333, 323, 320, 315, 297, 299, 328, 327, 338, 359, 368, 385, 413, 412, 422, 431, 433, 449, 509, 528, 562, 573, 619, 637, 624, 626, 627, 604, 569, 554, 537, 529, 506, 532, 533, 540, 551, 572, 591, 598, 605, 614, 618, 623, 615, 609, 603, 587, 563, 547, 541, 555, 559, 556, 534, 536, 497, 498, 507, 492, 493, 499, 489, 503, 522, 535, 525, 516, 511, 475, 442, 461, 453, 464, 469, 479, 484, 478, 452, 458, 423, 446, 445, 450, 447, 438, 410, 389, 391, 437, 488, 513, 491, 487, 502, 510, 496, 477, 485, 474, 457, 441, 435, 421, 415, 409, 417, 407, 434, 399, 377, 369, 370, 344, 345, 334, 367, 363, 339, 331, 329, 335, 724]
# best = [670, 664, 663, 662, 658, 649, 641, 636, 606, 576, 580, 561, 541, 555, 556, 559, 570, 577, 599, 600, 610, 583, 578, 574, 588, 616, 611, 620, 589, 579, 534, 536, 566, 571, 601, 629, 612, 617, 621, 631, 632, 622, 613, 590, 584, 575, 557, 535, 522, 499, 489, 493, 492, 507, 498, 497, 478, 484, 479, 469, 464, 453, 461, 425, 442, 459, 475, 503, 511, 516, 525, 558, 550, 542, 538, 543, 526, 517, 508, 512, 518, 521, 519, 514, 500, 480, 472, 482, 471, 454, 448, 462, 420, 378, 401, 411, 356, 313, 325, 324, 321, 336, 337, 347, 352, 374, 373, 383, 386, 371, 400, 418, 452, 458, 513, 488, 491, 487, 502, 510, 547, 563, 585, 587, 603, 609, 615, 623, 618, 614, 630, 639, 642, 654, 657, 686, 690, 696, 714, 720, 719, 718, 730, 729, 732, 728, 727, 717, 700, 709, 712, 716, 726, 731, 725, 713, 724, 721, 715, 710, 705, 706, 701, 702, 699, 697, 698, 689, 685, 681, 673, 680, 676, 672, 688, 679, 683, 669, 675, 693, 723, 692, 733, 722, 711, 691, 651, 633, 666, 594, 564, 593, 607, 592, 548, 544, 545, 530, 539, 552, 565, 531, 523, 515, 481, 494, 466, 467, 414, 439, 460, 463, 451, 465, 455, 443, 426, 397, 406, 396, 395, 392, 402, 387, 384, 361, 348, 326, 360, 357, 317, 301, 296, 292, 284, 277, 308, 318, 314, 302, 278, 248, 220, 209, 203, 227, 281, 249, 253, 257, 274, 282, 307, 319, 306, 349, 353, 366, 365, 381, 398, 390, 393, 403, 424, 444, 427, 428, 419, 408, 388, 375, 376, 379, 382, 416, 404, 405, 372, 358, 362, 346, 332, 355, 310, 298, 289, 285, 286, 287, 258, 254, 272, 259, 231, 237, 216, 210, 201, 172, 176, 200, 197, 205, 215, 221, 213, 196, 192, 184, 187, 171, 157, 163, 143, 135, 115, 127, 101, 100, 93, 86, 105, 121, 128, 151, 147, 144, 140, 137, 102, 98, 95, 77, 63, 81, 96, 116, 129, 138, 154, 149, 158, 175, 166, 159, 155, 136, 130, 118, 111, 106, 110, 113, 87, 60, 58, 56, 51, 47, 34, 31, 29, 32, 36, 48, 41, 70, 64, 61, 69, 88, 89, 107, 103, 112, 131, 124, 97, 91, 68, 42, 38, 50, 59, 54, 37, 30, 28, 19, 13, 8, 12, 11, 22, 14, 9, 7, 3, 4, 6, 1, 0, 2, 5, 10, 21, 17, 15, 26, 35, 44, 45, 46, 76, 92, 83, 84, 78, 79, 80, 85, 90, 114, 126, 109, 108, 117, 132, 180, 191, 214, 195, 183, 170, 169, 186, 211, 194, 190, 189, 179, 168, 164, 161, 104, 72, 73, 74, 75, 66, 67, 57, 24, 20, 18, 16, 23, 25, 27, 33, 39, 40, 43, 49, 52, 53, 62, 71, 55, 65, 82, 94, 99, 122, 123, 120, 119, 125, 207, 244, 252, 236, 268, 261, 269, 262, 245, 212, 181, 208, 228, 239, 241, 247, 270, 256, 246, 255, 280, 288, 312, 316, 295, 294, 291, 330, 351, 380, 394, 423, 410, 446, 445, 450, 447, 438, 437, 391, 389, 364, 342, 311, 305, 293, 265, 264, 260, 300, 304, 331, 367, 363, 339, 335, 329, 334, 345, 344, 338, 327, 299, 229, 232, 234, 250, 242, 238, 223, 219, 226, 230, 243, 273, 283, 276, 266, 267, 271, 279, 251, 235, 233, 204, 146, 142, 150, 133, 139, 141, 156, 160, 162, 167, 178, 177, 199, 185, 198, 206, 188, 202, 174, 165, 148, 134, 153, 152, 145, 173, 182, 193, 217, 222, 224, 218, 225, 240, 263, 275, 303, 343, 354, 340, 350, 341, 333, 322, 309, 290, 297, 315, 323, 320, 328, 359, 368, 385, 413, 412, 422, 431, 433, 449, 483, 490, 504, 501, 486, 476, 456, 436, 430, 432, 429, 440, 473, 468, 470, 495, 527, 546, 553, 567, 595, 568, 602, 640, 660, 667, 678, 682, 674, 652, 655, 647, 635, 634, 638, 596, 581, 582, 586, 597, 625, 646, 648, 661, 656, 668, 659, 653, 637, 624, 619, 573, 562, 560, 549, 524, 520, 505, 509, 528, 506, 485, 474, 434, 399, 377, 369, 370, 407, 417, 409, 415, 421, 435, 441, 457, 477, 496, 533, 540, 551, 532, 529, 537, 554, 569, 572, 591, 598, 605, 608, 604, 628, 627, 626, 643, 644, 645, 650, 665, 671, 677, 684, 687, 694, 695, 703, 707, 708, 704]

# best = [343, 354, 340, 350, 341, 333, 322, 309, 290, 297, 315, 323, 320, 328, 338, 359, 368, 369, 377, 399, 434, 407, 417, 421, 415, 409, 367, 363, 339, 331, 335, 329, 334, 345, 370, 344, 327, 299, 283, 276, 304, 300, 279, 271, 267, 266, 273, 243, 238, 242, 250, 234, 232, 229, 206, 198, 185, 199, 223, 230, 226, 219, 204, 233, 235, 251, 260, 264, 265, 291, 294, 295, 316, 312, 337, 352, 347, 336, 321, 324, 325, 288, 280, 262, 269, 261, 268, 214, 195, 211, 236, 252, 244, 207, 125, 119, 120, 123, 122, 99, 104, 161, 164, 168, 179, 189, 190, 194, 186, 169, 170, 183, 191, 180, 132, 117, 109, 108, 57, 67, 66, 75, 74, 73, 72, 71, 62, 53, 43, 49, 52, 55, 65, 40, 27, 25, 23, 22, 28, 30, 37, 54, 59, 68, 50, 42, 38, 33, 39, 82, 94, 97, 91, 103, 70, 64, 41, 48, 61, 69, 88, 89, 111, 118, 107, 112, 130, 136, 139, 133, 131, 124, 142, 146, 150, 141, 156, 160, 162, 167, 178, 166, 177, 175, 159, 155, 158, 149, 188, 174, 165, 154, 138, 129, 116, 113, 110, 106, 87, 60, 58, 56, 51, 47, 36, 34, 32, 31, 29, 19, 13, 8, 12, 11, 14, 18, 20, 16, 9, 7, 3, 4, 6, 1, 10, 5, 2, 0, 15, 26, 17, 21, 24, 35, 44, 45, 46, 76, 92, 83, 84, 78, 79, 80, 85, 90, 114, 126, 181, 212, 208, 228, 245, 255, 246, 256, 239, 241, 247, 270, 313, 356, 378, 420, 448, 462, 472, 482, 480, 500, 519, 514, 512, 518, 521, 543, 542, 538, 526, 517, 508, 471, 454, 459, 442, 425, 411, 401, 374, 373, 383, 386, 371, 400, 394, 380, 364, 351, 330, 311, 293, 305, 342, 391, 389, 410, 423, 446, 445, 450, 447, 438, 437, 435, 441, 457, 474, 477, 496, 485, 506, 529, 537, 532, 533, 540, 551, 554, 569, 572, 591, 598, 605, 608, 604, 628, 627, 626, 624, 637, 619, 573, 562, 528, 509, 505, 520, 524, 549, 560, 582, 586, 597, 625, 648, 646, 656, 668, 659, 673, 681, 701, 702, 706, 713, 716, 712, 709, 700, 703, 695, 694, 687, 684, 677, 671, 665, 653, 650, 643, 644, 645, 657, 654, 642, 639, 630, 614, 618, 623, 615, 609, 603, 587, 585, 563, 547, 510, 502, 487, 491, 488, 458, 452, 418, 453, 461, 475, 511, 516, 525, 503, 489, 499, 493, 479, 469, 464, 478, 484, 492, 507, 498, 497, 534, 536, 522, 535, 557, 558, 550, 590, 613, 622, 632, 631, 621, 617, 575, 584, 612, 629, 601, 571, 566, 589, 620, 611, 616, 588, 579, 574, 578, 583, 610, 600, 599, 577, 556, 513, 541, 555, 559, 570, 561, 580, 576, 606, 636, 641, 649, 664, 670, 663, 658, 662, 686, 690, 696, 704, 707, 708, 714, 720, 719, 718, 717, 730, 729, 727, 728, 732, 731, 726, 725, 724, 721, 715, 710, 705, 699, 697, 698, 689, 685, 680, 676, 672, 661, 688, 679, 683, 669, 675, 674, 652, 655, 647, 635, 634, 638, 596, 581, 660, 667, 678, 682, 693, 723, 692, 733, 722, 711, 691, 640, 602, 568, 595, 567, 504, 501, 486, 476, 490, 483, 449, 431, 422, 413, 385, 412, 433, 456, 436, 430, 432, 429, 440, 416, 404, 405, 372, 382, 379, 376, 375, 388, 355, 349, 353, 366, 365, 348, 361, 384, 392, 395, 396, 406, 397, 381, 398, 390, 393, 403, 424, 419, 408, 428, 427, 444, 468, 473, 495, 470, 443, 455, 426, 465, 481, 515, 523, 531, 546, 527, 553, 651, 666, 633, 565, 594, 552, 564, 593, 607, 592, 548, 544, 545, 539, 530, 494, 466, 467, 460, 463, 451, 439, 414, 402, 387, 360, 357, 308, 317, 301, 296, 292, 284, 277, 278, 318, 326, 302, 314, 306, 319, 307, 310, 298, 287, 286, 289, 285, 282, 274, 257, 253, 249, 281, 248, 220, 209, 203, 213, 227, 221, 215, 205, 192, 196, 187, 184, 171, 157, 163, 143, 135, 197, 200, 258, 254, 237, 231, 224, 218, 222, 217, 216, 210, 201, 172, 176, 151, 147, 144, 140, 128, 127, 115, 101, 100, 93, 105, 121, 102, 98, 95, 86, 77, 63, 81, 96, 134, 148, 153, 152, 145, 137, 173, 182, 193, 202, 225, 240, 263, 275, 259, 272, 303, 332, 346, 362, 358]
best = [504, 476, 456, 483, 490, 524, 520, 505, 449, 433, 431, 422, 412, 413, 385, 359, 328, 327, 338, 344, 345, 334, 304, 276, 266, 267, 271, 279, 300, 329, 335, 331, 339, 363, 367, 391, 389, 342, 311, 293, 305, 260, 264, 265, 244, 291, 330, 351, 364, 380, 394, 400, 371, 386, 383, 373, 374, 347, 352, 316, 295, 294, 268, 261, 269, 262, 245, 214, 195, 183, 169, 170, 191, 212, 208, 181, 180, 132, 117, 108, 109, 126, 114, 90, 85, 80, 79, 78, 84, 92, 83, 76, 46, 45, 44, 35, 21, 17, 26, 15, 0, 2, 5, 10, 1, 6, 4, 3, 7, 9, 16, 18, 20, 24, 57, 67, 66, 75, 74, 73, 72, 71, 62, 53, 43, 49, 52, 55, 65, 40, 27, 25, 23, 22, 14, 11, 12, 8, 13, 19, 28, 33, 39, 38, 42, 50, 30, 37, 41, 48, 54, 59, 68, 91, 97, 82, 94, 125, 119, 120, 123, 122, 99, 104, 161, 164, 168, 190, 194, 186, 211, 236, 252, 179, 189, 207, 251, 235, 233, 204, 219, 226, 230, 223, 238, 243, 273, 283, 299, 250, 242, 234, 232, 229, 206, 198, 185, 199, 177, 166, 178, 167, 162, 160, 159, 155, 175, 158, 149, 138, 129, 96, 81, 95, 102, 98, 86, 77, 63, 31, 29, 32, 34, 36, 47, 60, 58, 51, 56, 69, 61, 64, 70, 107, 103, 112, 133, 131, 124, 142, 146, 150, 139, 141, 156, 136, 130, 118, 111, 106, 89, 88, 87, 110, 113, 116, 134, 148, 154, 165, 174, 188, 202, 153, 152, 145, 173, 182, 193, 218, 224, 222, 217, 231, 259, 272, 303, 275, 225, 240, 263, 290, 297, 309, 322, 333, 315, 320, 323, 341, 350, 340, 354, 343, 358, 372, 416, 440, 429, 432, 436, 430, 405, 404, 362, 346, 332, 310, 298, 287, 258, 254, 237, 216, 210, 201, 200, 197, 176, 172, 151, 147, 144, 140, 137, 121, 105, 93, 100, 101, 128, 127, 115, 135, 143, 163, 157, 171, 184, 187, 196, 192, 205, 215, 257, 289, 286, 285, 282, 274, 253, 249, 227, 221, 213, 203, 209, 220, 248, 278, 281, 302, 314, 326, 318, 308, 277, 284, 292, 296, 301, 317, 357, 360, 348, 361, 366, 353, 349, 306, 307, 319, 390, 393, 398, 403, 355, 375, 376, 379, 382, 388, 408, 419, 427, 428, 468, 473, 495, 470, 444, 424, 443, 455, 426, 381, 365, 397, 406, 396, 395, 384, 392, 387, 402, 414, 439, 451, 460, 467, 466, 494, 463, 465, 481, 515, 530, 539, 552, 545, 544, 548, 592, 607, 593, 564, 594, 666, 565, 523, 531, 546, 633, 651, 691, 711, 722, 733, 723, 692, 678, 682, 693, 674, 675, 683, 669, 655, 652, 638, 634, 635, 647, 625, 597, 586, 562, 573, 619, 624, 637, 646, 648, 656, 659, 668, 661, 679, 688, 672, 676, 685, 680, 673, 681, 698, 689, 697, 699, 706, 713, 716, 725, 724, 721, 715, 710, 705, 702, 701, 712, 709, 700, 703, 704, 708, 714, 720, 718, 717, 726, 731, 732, 728, 727, 729, 730, 719, 707, 694, 695, 687, 684, 677, 671, 653, 665, 696, 690, 686, 662, 658, 663, 670, 664, 641, 636, 606, 649, 654, 657, 650, 644, 645, 642, 639, 630, 614, 618, 623, 615, 609, 603, 587, 585, 580, 576, 563, 547, 510, 502, 487, 491, 488, 513, 556, 559, 555, 541, 561, 570, 577, 599, 600, 610, 578, 574, 583, 579, 588, 616, 611, 620, 589, 566, 601, 629, 612, 571, 584, 617, 621, 631, 632, 622, 613, 590, 575, 557, 558, 550, 525, 503, 511, 516, 538, 542, 543, 526, 517, 508, 512, 518, 521, 519, 514, 500, 480, 482, 472, 462, 420, 378, 313, 270, 247, 241, 239, 228, 256, 246, 255, 280, 288, 312, 337, 336, 321, 324, 325, 356, 401, 411, 448, 454, 471, 459, 475, 442, 425, 418, 453, 461, 469, 464, 478, 484, 479, 489, 499, 535, 522, 493, 492, 507, 498, 497, 536, 534, 452, 458, 446, 445, 450, 447, 438, 423, 410, 437, 435, 421, 415, 409, 417, 407, 370, 369, 368, 377, 399, 434, 441, 457, 474, 485, 477, 496, 533, 540, 554, 569, 604, 627, 626, 643, 628, 608, 605, 598, 591, 572, 551, 532, 537, 529, 506, 509, 528, 549, 560, 582, 596, 581, 568, 595, 602, 640, 667, 660, 567, 553, 527, 501, 486]

# best = None

def main(i,defg=None):
    print("Initializing...")
    st = time.time()
    d = readdata()
    # print(d[0][1])
    graph = list(range(n))
    print(graph)
    # graph = only_one_untangle(graph,dist(graph,d),d)
    mg = graph
    if defg: mg = defg
    else:
        if best and len(best) == n: mg = best
    mind = dist(mg,d)
    display(mg,d,i,0,mind,"best")
    display(mg,d,i,0,mind,"trial")
    num = 0
    global slim
    global hslim
    global CV2
    try:
        print("Finished initialization in {} seconds".format(time.time()-st))
        print("Starting computation")
        st = time.time()
        while True:
            print("Shuffling...")
            random.shuffle(graph)
            slim = SMALL_SWAP_LIM
            hslim = HARD_SWAP_LIM
            CV2_was_on = CV2
            if n > 100:
                print("Finding min by choosing randomly")
                CV2 = False
                graph,tmd = findmin(graph,d,True,0) # only swaps
                print()
                graph,tmd = findmin(graph,d,True,0) # only swaps
                print()
                if(CV2_was_on): CV2 = True
                print("Continuing...")
            slim = MED_SWAP_LIM
            g,tmd = findmin(graph,d,False,0) # include reversals
            if tmd < mind: # Change for max
                mg = g
                mind = tmd
                print("New local min at {} with dist {}".format(mg,mind))
                num += 1
                display(mg,d,i,num,mind,"best")
                if mind < 6659.5:
                    if STOP_ON_SOLVE:
                        print("Thread {} done".format(i))
                        print("Finished in {} seconds".format(time.time()-st))
                        while True:
                            display(mg,d,i,num,mind,"best")
                            display(mg,d,i,num,mind,"trial")
                            time.sleep(1)
                    else:
                        print("Best found in {} seconds".format(time.time()-st))
            else:
                print()
    except KeyboardInterrupt:
        print("EXITING: {} {} {} {}".format(mind,i,num,mg))
    return

if PROFILE:
    import cProfile
    cProfile.run('main(0)')
    sys.exit()

if CV2 or not THREADING: main(0,best)
else:
    pool = Pool(3)
    try:
        pool.map(main,range(3))
    except:
        pool.terminate()
        pool.join()
