
merge1.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <bs>:
#include <stdio.h>
#include <omp.h>
#include <math.h>

int bs(int* a, int s, int len, int offset) { // offset should be 0 to start
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 83 ec 20          	sub    rsp,0x20
   8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   c:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   f:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
  12:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
	if(!len) return offset;
  15:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  19:	75 08                	jne    23 <bs+0x23>
  1b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  1e:	e9 b2 00 00 00       	jmp    d5 <bs+0xd5>
	if(s > a[offset+len-1]) return offset+len;
  23:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  26:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  29:	01 d0                	add    eax,edx
  2b:	48 98                	cdqe   
  2d:	48 c1 e0 02          	shl    rax,0x2
  31:	48 8d 50 fc          	lea    rdx,[rax-0x4]
  35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  39:	48 01 d0             	add    rax,rdx
  3c:	8b 00                	mov    eax,DWORD PTR [rax]
  3e:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
  41:	7d 0d                	jge    50 <bs+0x50>
  43:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  46:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  49:	01 d0                	add    eax,edx
  4b:	e9 85 00 00 00       	jmp    d5 <bs+0xd5>
	if(s < a[offset+len/2])	return bs(a,s,len/2,offset);
  50:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  53:	89 c2                	mov    edx,eax
  55:	c1 ea 1f             	shr    edx,0x1f
  58:	01 d0                	add    eax,edx
  5a:	d1 f8                	sar    eax,1
  5c:	89 c2                	mov    edx,eax
  5e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  61:	01 d0                	add    eax,edx
  63:	48 98                	cdqe   
  65:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  6c:	00 
  6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  71:	48 01 d0             	add    rax,rdx
  74:	8b 00                	mov    eax,DWORD PTR [rax]
  76:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
  79:	7e 26                	jle    a1 <bs+0xa1>
  7b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  7e:	89 c2                	mov    edx,eax
  80:	c1 ea 1f             	shr    edx,0x1f
  83:	01 d0                	add    eax,edx
  85:	d1 f8                	sar    eax,1
  87:	89 c7                	mov    edi,eax
  89:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  8c:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  93:	89 d1                	mov    ecx,edx
  95:	89 fa                	mov    edx,edi
  97:	48 89 c7             	mov    rdi,rax
  9a:	e8 00 00 00 00       	call   9f <bs+0x9f>
  9f:	eb 34                	jmp    d5 <bs+0xd5>
	return bs(a,s,len/2,offset+len/2);
  a1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  a4:	89 c2                	mov    edx,eax
  a6:	c1 ea 1f             	shr    edx,0x1f
  a9:	01 d0                	add    eax,edx
  ab:	d1 f8                	sar    eax,1
  ad:	89 c2                	mov    edx,eax
  af:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  b2:	01 c2                	add    edx,eax
  b4:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  b7:	89 c1                	mov    ecx,eax
  b9:	c1 e9 1f             	shr    ecx,0x1f
  bc:	01 c8                	add    eax,ecx
  be:	d1 f8                	sar    eax,1
  c0:	89 c7                	mov    edi,eax
  c2:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  c9:	89 d1                	mov    ecx,edx
  cb:	89 fa                	mov    edx,edi
  cd:	48 89 c7             	mov    rdi,rax
  d0:	e8 00 00 00 00       	call   d5 <bs+0xd5>
}
  d5:	c9                   	leave  
  d6:	c3                   	ret    

00000000000000d7 <printarr>:

void printarr(int* arr, int len) {
  d7:	55                   	push   rbp
  d8:	48 89 e5             	mov    rbp,rsp
  db:	53                   	push   rbx
  dc:	48 83 ec 18          	sub    rsp,0x18
  e0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  e4:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
	printf("%2d",*arr);
  e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  eb:	8b 00                	mov    eax,DWORD PTR [rax]
  ed:	89 c6                	mov    esi,eax
  ef:	bf 00 00 00 00       	mov    edi,0x0
  f4:	b8 00 00 00 00       	mov    eax,0x0
  f9:	e8 00 00 00 00       	call   fe <printarr+0x27>
	if(len>1) {
  fe:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
 102:	7e 34                	jle    138 <printarr+0x61>
		register int k;
		for(k=1;k<len;k++) {
 104:	bb 01 00 00 00       	mov    ebx,0x1
 109:	eb 28                	jmp    133 <printarr+0x5c>
			printf(", %2d",arr[k]);
 10b:	48 63 c3             	movsxd rax,ebx
 10e:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
 115:	00 
 116:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
 11a:	48 01 d0             	add    rax,rdx
 11d:	8b 00                	mov    eax,DWORD PTR [rax]
 11f:	89 c6                	mov    esi,eax
 121:	bf 00 00 00 00       	mov    edi,0x0
 126:	b8 00 00 00 00       	mov    eax,0x0
 12b:	e8 00 00 00 00       	call   130 <printarr+0x59>

void printarr(int* arr, int len) {
	printf("%2d",*arr);
	if(len>1) {
		register int k;
		for(k=1;k<len;k++) {
 130:	83 c3 01             	add    ebx,0x1
 133:	3b 5d e4             	cmp    ebx,DWORD PTR [rbp-0x1c]
 136:	7c d3                	jl     10b <printarr+0x34>
			printf(", %2d",arr[k]);
		}
	}
	printf("\n");
 138:	bf 0a 00 00 00       	mov    edi,0xa
 13d:	e8 00 00 00 00       	call   142 <printarr+0x6b>
}
 142:	48 83 c4 18          	add    rsp,0x18
 146:	5b                   	pop    rbx
 147:	5d                   	pop    rbp
 148:	c3                   	ret    

0000000000000149 <main>:

int main(int argc, char* argv[])
{
 149:	55                   	push   rbp
 14a:	48 89 e5             	mov    rbp,rsp
 14d:	41 57                	push   r15
 14f:	41 56                	push   r14
 151:	41 55                	push   r13
 153:	41 54                	push   r12
 155:	53                   	push   rbx
 156:	48 81 ec 88 01 00 00 	sub    rsp,0x188
 15d:	89 bd 5c fe ff ff    	mov    DWORD PTR [rbp-0x1a4],edi
 163:	48 89 b5 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rsi
 16a:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 171:	00 00 
 173:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
 177:	31 c0                	xor    eax,eax
	#define HN 16
	#define LN 5
	#define HNM 15

	int k;
	int big[N] = {1,2,4,5,8,10,13,14,16,18,19,22,25,27,29,30,/**/3,6,7,9,11,12,15,17,20,21,23,24,26,28,31,32};
 179:	c7 85 c0 fe ff ff 01 	mov    DWORD PTR [rbp-0x140],0x1
 180:	00 00 00 
 183:	c7 85 c4 fe ff ff 02 	mov    DWORD PTR [rbp-0x13c],0x2
 18a:	00 00 00 
 18d:	c7 85 c8 fe ff ff 04 	mov    DWORD PTR [rbp-0x138],0x4
 194:	00 00 00 
 197:	c7 85 cc fe ff ff 05 	mov    DWORD PTR [rbp-0x134],0x5
 19e:	00 00 00 
 1a1:	c7 85 d0 fe ff ff 08 	mov    DWORD PTR [rbp-0x130],0x8
 1a8:	00 00 00 
 1ab:	c7 85 d4 fe ff ff 0a 	mov    DWORD PTR [rbp-0x12c],0xa
 1b2:	00 00 00 
 1b5:	c7 85 d8 fe ff ff 0d 	mov    DWORD PTR [rbp-0x128],0xd
 1bc:	00 00 00 
 1bf:	c7 85 dc fe ff ff 0e 	mov    DWORD PTR [rbp-0x124],0xe
 1c6:	00 00 00 
 1c9:	c7 85 e0 fe ff ff 10 	mov    DWORD PTR [rbp-0x120],0x10
 1d0:	00 00 00 
 1d3:	c7 85 e4 fe ff ff 12 	mov    DWORD PTR [rbp-0x11c],0x12
 1da:	00 00 00 
 1dd:	c7 85 e8 fe ff ff 13 	mov    DWORD PTR [rbp-0x118],0x13
 1e4:	00 00 00 
 1e7:	c7 85 ec fe ff ff 16 	mov    DWORD PTR [rbp-0x114],0x16
 1ee:	00 00 00 
 1f1:	c7 85 f0 fe ff ff 19 	mov    DWORD PTR [rbp-0x110],0x19
 1f8:	00 00 00 
 1fb:	c7 85 f4 fe ff ff 1b 	mov    DWORD PTR [rbp-0x10c],0x1b
 202:	00 00 00 
 205:	c7 85 f8 fe ff ff 1d 	mov    DWORD PTR [rbp-0x108],0x1d
 20c:	00 00 00 
 20f:	c7 85 fc fe ff ff 1e 	mov    DWORD PTR [rbp-0x104],0x1e
 216:	00 00 00 
 219:	c7 85 00 ff ff ff 03 	mov    DWORD PTR [rbp-0x100],0x3
 220:	00 00 00 
 223:	c7 85 04 ff ff ff 06 	mov    DWORD PTR [rbp-0xfc],0x6
 22a:	00 00 00 
 22d:	c7 85 08 ff ff ff 07 	mov    DWORD PTR [rbp-0xf8],0x7
 234:	00 00 00 
 237:	c7 85 0c ff ff ff 09 	mov    DWORD PTR [rbp-0xf4],0x9
 23e:	00 00 00 
 241:	c7 85 10 ff ff ff 0b 	mov    DWORD PTR [rbp-0xf0],0xb
 248:	00 00 00 
 24b:	c7 85 14 ff ff ff 0c 	mov    DWORD PTR [rbp-0xec],0xc
 252:	00 00 00 
 255:	c7 85 18 ff ff ff 0f 	mov    DWORD PTR [rbp-0xe8],0xf
 25c:	00 00 00 
 25f:	c7 85 1c ff ff ff 11 	mov    DWORD PTR [rbp-0xe4],0x11
 266:	00 00 00 
 269:	c7 85 20 ff ff ff 14 	mov    DWORD PTR [rbp-0xe0],0x14
 270:	00 00 00 
 273:	c7 85 24 ff ff ff 15 	mov    DWORD PTR [rbp-0xdc],0x15
 27a:	00 00 00 
 27d:	c7 85 28 ff ff ff 17 	mov    DWORD PTR [rbp-0xd8],0x17
 284:	00 00 00 
 287:	c7 85 2c ff ff ff 18 	mov    DWORD PTR [rbp-0xd4],0x18
 28e:	00 00 00 
 291:	c7 85 30 ff ff ff 1a 	mov    DWORD PTR [rbp-0xd0],0x1a
 298:	00 00 00 
 29b:	c7 85 34 ff ff ff 1c 	mov    DWORD PTR [rbp-0xcc],0x1c
 2a2:	00 00 00 
 2a5:	c7 85 38 ff ff ff 1f 	mov    DWORD PTR [rbp-0xc8],0x1f
 2ac:	00 00 00 
 2af:	c7 85 3c ff ff ff 20 	mov    DWORD PTR [rbp-0xc4],0x20
 2b6:	00 00 00 
	int* A = big;
 2b9:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
 2c0:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
	int* B = &(big[HN]);
 2c7:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
 2ce:	48 83 c0 40          	add    rax,0x40
 2d2:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
	int C[N];
	register int i;
	for(i=0;i<N;i++)C[i]=-1;
 2d9:	bb 00 00 00 00       	mov    ebx,0x0
 2de:	eb 11                	jmp    2f1 <main+0x1a8>
 2e0:	48 63 c3             	movsxd rax,ebx
 2e3:	c7 84 85 40 ff ff ff 	mov    DWORD PTR [rbp+rax*4-0xc0],0xffffffff
 2ea:	ff ff ff ff 
 2ee:	83 c3 01             	add    ebx,0x1
 2f1:	83 fb 1f             	cmp    ebx,0x1f
 2f4:	7e ea                	jle    2e0 <main+0x197>

	int ln = LN;
 2f6:	c7 85 68 fe ff ff 05 	mov    DWORD PTR [rbp-0x198],0x5
 2fd:	00 00 00 
	int x = N/LN;
 300:	c7 85 6c fe ff ff 06 	mov    DWORD PTR [rbp-0x194],0x6
 307:	00 00 00 

	printf("Source array 1:  ");
 30a:	bf 00 00 00 00       	mov    edi,0x0
 30f:	b8 00 00 00 00       	mov    eax,0x0
 314:	e8 00 00 00 00       	call   319 <main+0x1d0>
	printarr(A,HN);
 319:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
 320:	be 10 00 00 00       	mov    esi,0x10
 325:	48 89 c7             	mov    rdi,rax
 328:	e8 00 00 00 00       	call   32d <main+0x1e4>
	printf("Source array 2:  ");
 32d:	bf 00 00 00 00       	mov    edi,0x0
 332:	b8 00 00 00 00       	mov    eax,0x0
 337:	e8 00 00 00 00       	call   33c <main+0x1f3>
	printarr(B,HN);
 33c:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
 343:	be 10 00 00 00       	mov    esi,0x10
 348:	48 89 c7             	mov    rdi,rax
 34b:	e8 00 00 00 00       	call   350 <main+0x207>

	int ind;
	int inds[x];
 350:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
 356:	48 89 e2             	mov    rdx,rsp
 359:	48 89 d3             	mov    rbx,rdx
 35c:	48 63 d0             	movsxd rdx,eax
 35f:	48 83 ea 01          	sub    rdx,0x1
 363:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
 36a:	48 63 d0             	movsxd rdx,eax
 36d:	49 89 d6             	mov    r14,rdx
 370:	41 bf 00 00 00 00    	mov    r15d,0x0
 376:	48 63 d0             	movsxd rdx,eax
 379:	49 89 d4             	mov    r12,rdx
 37c:	41 bd 00 00 00 00    	mov    r13d,0x0
 382:	48 98                	cdqe   
 384:	48 c1 e0 02          	shl    rax,0x2
 388:	48 8d 50 03          	lea    rdx,[rax+0x3]
 38c:	b8 10 00 00 00       	mov    eax,0x10
 391:	48 83 e8 01          	sub    rax,0x1
 395:	48 01 d0             	add    rax,rdx
 398:	b9 10 00 00 00       	mov    ecx,0x10
 39d:	ba 00 00 00 00       	mov    edx,0x0
 3a2:	48 f7 f1             	div    rcx
 3a5:	48 6b c0 10          	imul   rax,rax,0x10
 3a9:	48 29 c4             	sub    rsp,rax
 3ac:	48 89 e0             	mov    rax,rsp
 3af:	48 83 c0 03          	add    rax,0x3
 3b3:	48 c1 e8 02          	shr    rax,0x2
 3b7:	48 c1 e0 02          	shl    rax,0x2
 3bb:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax

	#pragma omp parallel for private(ind)
 3c2:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
 3c9:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
 3d0:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
 3d7:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
 3de:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
 3e5:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
 3ec:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
 3f3:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
 3fa:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
 401:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
 408:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
 40e:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
 414:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
 41b:	b9 00 00 00 00       	mov    ecx,0x0
 420:	ba 00 00 00 00       	mov    edx,0x0
 425:	48 89 c6             	mov    rsi,rax
 428:	bf 00 00 00 00       	mov    edi,0x0
 42d:	e8 00 00 00 00       	call   432 <main+0x2e9>
 432:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
 439:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
 440:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
 447:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
 44e:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
 454:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
	for(k=0;k<N;k+=x) {
		ind = k > HNM ? bs(A,big[k],HN,0) + k-HN : bs(B,big[k],HN,0) + k;
		C[ind] = big[k];
		inds[k/x] = ind;
	}
	printf("Result (seg'd):  ");
 45a:	bf 00 00 00 00       	mov    edi,0x0
 45f:	b8 00 00 00 00       	mov    eax,0x0
 464:	e8 00 00 00 00       	call   469 <main+0x320>
	printarr(C,N);
 469:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
 470:	be 20 00 00 00       	mov    esi,0x20
 475:	48 89 c7             	mov    rdi,rax
 478:	e8 00 00 00 00       	call   47d <main+0x334>

	int a;
	int b;
	#pragma omp parallel for private(a,b)
 47d:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
 484:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
 48b:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
 492:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
 499:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
 4a0:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
 4a7:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
 4ae:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
 4b5:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
 4bb:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
 4c1:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
 4c8:	b9 00 00 00 00       	mov    ecx,0x0
 4cd:	ba 00 00 00 00       	mov    edx,0x0
 4d2:	48 89 c6             	mov    rsi,rax
 4d5:	bf 00 00 00 00       	mov    edi,0x0
 4da:	e8 00 00 00 00       	call   4df <main+0x396>
 4df:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
 4e6:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
 4ed:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
 4f4:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
 4fb:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
 501:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
			if(a > HNM && b < HN) C[ind++] = B[b++];
			else if(b > HNM && a < HN) C[ind++] = A[a++];
			else C[ind++] = A[a] < B[b] ? A[a++] : B[b++];
		}
	}
	printf("Final result:    ");
 507:	bf 00 00 00 00       	mov    edi,0x0
 50c:	b8 00 00 00 00       	mov    eax,0x0
 511:	e8 00 00 00 00       	call   516 <main+0x3cd>
	printarr(C,N);
 516:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
 51d:	be 20 00 00 00       	mov    esi,0x20
 522:	48 89 c7             	mov    rdi,rax
 525:	e8 00 00 00 00       	call   52a <main+0x3e1>
 52a:	48 89 dc             	mov    rsp,rbx
}
 52d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
 531:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 538:	00 00 
 53a:	74 05                	je     541 <main+0x3f8>
 53c:	e8 00 00 00 00       	call   541 <main+0x3f8>
 541:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
 545:	5b                   	pop    rbx
 546:	41 5c                	pop    r12
 548:	41 5d                	pop    r13
 54a:	41 5e                	pop    r14
 54c:	41 5f                	pop    r15
 54e:	5d                   	pop    rbp
 54f:	c3                   	ret    

0000000000000550 <main._omp_fn.1>:
	printf("Result (seg'd):  ");
	printarr(C,N);

	int a;
	int b;
	#pragma omp parallel for private(a,b)
 550:	55                   	push   rbp
 551:	48 89 e5             	mov    rbp,rsp
 554:	41 54                	push   r12
 556:	53                   	push   rbx
 557:	48 83 ec 30          	sub    rsp,0x30
 55b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
 55f:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 566:	00 00 
 568:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
 56c:	31 c0                	xor    eax,eax
 56e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 572:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
 576:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
 57a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 57e:	8b 58 20             	mov    ebx,DWORD PTR [rax+0x20]
 581:	e8 00 00 00 00       	call   586 <main._omp_fn.1+0x36>
 586:	41 89 c4             	mov    r12d,eax
 589:	e8 00 00 00 00       	call   58e <main._omp_fn.1+0x3e>
 58e:	89 c6                	mov    esi,eax
 590:	89 d8                	mov    eax,ebx
 592:	99                   	cdq    
 593:	41 f7 fc             	idiv   r12d
 596:	89 c1                	mov    ecx,eax
 598:	89 d8                	mov    eax,ebx
 59a:	99                   	cdq    
 59b:	41 f7 fc             	idiv   r12d
 59e:	89 d0                	mov    eax,edx
 5a0:	39 c6                	cmp    esi,eax
 5a2:	0f 8c 5a 02 00 00    	jl     802 <main._omp_fn.1+0x2b2>
 5a8:	0f af f1             	imul   esi,ecx
 5ab:	89 f2                	mov    edx,esi
 5ad:	01 d0                	add    eax,edx
 5af:	8d 1c 08             	lea    ebx,[rax+rcx*1]
 5b2:	39 d8                	cmp    eax,ebx
 5b4:	0f 8d 55 02 00 00    	jge    80f <main._omp_fn.1+0x2bf>
 5ba:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
	for(k=0;k<x;k++) {
		int ind = inds[k];
 5bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 5c1:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
 5c4:	48 63 d2             	movsxd rdx,edx
 5c7:	8b 04 90             	mov    eax,DWORD PTR [rax+rdx*4]
 5ca:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
		a = bs(A,C[ind],HN,0);
 5cd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 5d1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
 5d5:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
 5d8:	48 63 d2             	movsxd rdx,edx
 5db:	8b 34 90             	mov    esi,DWORD PTR [rax+rdx*4]
 5de:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 5e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
 5e5:	b9 00 00 00 00       	mov    ecx,0x0
 5ea:	ba 10 00 00 00       	mov    edx,0x10
 5ef:	48 89 c7             	mov    rdi,rax
 5f2:	e8 00 00 00 00       	call   5f7 <main._omp_fn.1+0xa7>
 5f7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
		b = bs(B,C[ind],HN,0);
 5fa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 5fe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
 602:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
 605:	48 63 d2             	movsxd rdx,edx
 608:	8b 34 90             	mov    esi,DWORD PTR [rax+rdx*4]
 60b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 60f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
 613:	b9 00 00 00 00       	mov    ecx,0x0
 618:	ba 10 00 00 00       	mov    edx,0x10
 61d:	48 89 c7             	mov    rdi,rax
 620:	e8 00 00 00 00       	call   625 <main._omp_fn.1+0xd5>
 625:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
		if(A[a] == C[ind]) a++;
 628:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
 62b:	48 98                	cdqe   
 62d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
 634:	00 
 635:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 639:	48 8b 00             	mov    rax,QWORD PTR [rax]
 63c:	48 01 d0             	add    rax,rdx
 63f:	8b 08                	mov    ecx,DWORD PTR [rax]
 641:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 645:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
 649:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
 64c:	48 63 d2             	movsxd rdx,edx
 64f:	8b 04 90             	mov    eax,DWORD PTR [rax+rdx*4]
 652:	39 c1                	cmp    ecx,eax
 654:	0f 84 9f 01 00 00    	je     7f9 <main._omp_fn.1+0x2a9>
		if(B[b] == C[ind]) b++;
 65a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
 65d:	48 98                	cdqe   
 65f:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
 666:	00 
 667:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 66b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
 66f:	48 01 d0             	add    rax,rdx
 672:	8b 08                	mov    ecx,DWORD PTR [rax]
 674:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 678:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
 67c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
 67f:	48 63 d2             	movsxd rdx,edx
 682:	8b 04 90             	mov    eax,DWORD PTR [rax+rdx*4]
 685:	39 c1                	cmp    ecx,eax
 687:	0f 84 63 01 00 00    	je     7f0 <main._omp_fn.1+0x2a0>
		ind++;
 68d:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1

		while(C[ind] < 0) {
 691:	90                   	nop
 692:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 696:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
 69a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
 69d:	48 63 d2             	movsxd rdx,edx
 6a0:	8b 04 90             	mov    eax,DWORD PTR [rax+rdx*4]
 6a3:	85 c0                	test   eax,eax
 6a5:	78 12                	js     6b9 <main._omp_fn.1+0x169>
 6a7:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
 6ab:	39 5d d0             	cmp    DWORD PTR [rbp-0x30],ebx
 6ae:	0f 8c 09 ff ff ff    	jl     5bd <main._omp_fn.1+0x6d>
 6b4:	e9 56 01 00 00       	jmp    80f <main._omp_fn.1+0x2bf>
			if(a > HNM && b < HN) C[ind++] = B[b++];
 6b9:	83 7d d8 0f          	cmp    DWORD PTR [rbp-0x28],0xf
 6bd:	0f 8f e7 00 00 00    	jg     7aa <main._omp_fn.1+0x25a>
			else if(b > HNM && a < HN) C[ind++] = A[a++];
 6c3:	83 7d dc 0f          	cmp    DWORD PTR [rbp-0x24],0xf
 6c7:	0f 8f 98 00 00 00    	jg     765 <main._omp_fn.1+0x215>
			else C[ind++] = A[a] < B[b] ? A[a++] : B[b++];
 6cd:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
 6d0:	8d 42 01             	lea    eax,[rdx+0x1]
 6d3:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
 6d6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
 6d9:	48 98                	cdqe   
 6db:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
 6e2:	00 
 6e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 6e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
 6ea:	48 01 c8             	add    rax,rcx
 6ed:	8b 08                	mov    ecx,DWORD PTR [rax]
 6ef:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
 6f2:	48 98                	cdqe   
 6f4:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
 6fb:	00 
 6fc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 700:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
 704:	48 01 f0             	add    rax,rsi
 707:	8b 00                	mov    eax,DWORD PTR [rax]
 709:	39 c1                	cmp    ecx,eax
 70b:	7c 37                	jl     744 <main._omp_fn.1+0x1f4>
 70d:	eb 13                	jmp    722 <main._omp_fn.1+0x1d2>
 70f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
 713:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
 717:	48 63 d2             	movsxd rdx,edx
 71a:	89 04 91             	mov    DWORD PTR [rcx+rdx*4],eax
 71d:	e9 70 ff ff ff       	jmp    692 <main._omp_fn.1+0x142>
 722:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
 725:	8d 48 01             	lea    ecx,[rax+0x1]
 728:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
 72b:	48 98                	cdqe   
 72d:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
 734:	00 
 735:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 739:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
 73d:	48 01 c8             	add    rax,rcx
 740:	8b 00                	mov    eax,DWORD PTR [rax]
 742:	eb cb                	jmp    70f <main._omp_fn.1+0x1bf>
 744:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
 747:	8d 48 01             	lea    ecx,[rax+0x1]
 74a:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
 74d:	48 98                	cdqe   
 74f:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
 756:	00 
 757:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 75b:	48 8b 00             	mov    rax,QWORD PTR [rax]
 75e:	48 01 c8             	add    rax,rcx
 761:	8b 00                	mov    eax,DWORD PTR [rax]
 763:	eb aa                	jmp    70f <main._omp_fn.1+0x1bf>
		if(B[b] == C[ind]) b++;
		ind++;

		while(C[ind] < 0) {
			if(a > HNM && b < HN) C[ind++] = B[b++];
			else if(b > HNM && a < HN) C[ind++] = A[a++];
 765:	83 7d d8 0f          	cmp    DWORD PTR [rbp-0x28],0xf
 769:	0f 8f 5e ff ff ff    	jg     6cd <main._omp_fn.1+0x17d>
 76f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
 772:	8d 50 01             	lea    edx,[rax+0x1]
 775:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
 778:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
 77b:	8d 4a 01             	lea    ecx,[rdx+0x1]
 77e:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
 781:	48 63 d2             	movsxd rdx,edx
 784:	48 8d 0c 95 00 00 00 	lea    rcx,[rdx*4+0x0]
 78b:	00 
 78c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
 790:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
 793:	48 01 ca             	add    rdx,rcx
 796:	8b 0a                	mov    ecx,DWORD PTR [rdx]
 798:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
 79c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
 7a0:	48 98                	cdqe   
 7a2:	89 0c 82             	mov    DWORD PTR [rdx+rax*4],ecx
 7a5:	e9 e8 fe ff ff       	jmp    692 <main._omp_fn.1+0x142>
		if(A[a] == C[ind]) a++;
		if(B[b] == C[ind]) b++;
		ind++;

		while(C[ind] < 0) {
			if(a > HNM && b < HN) C[ind++] = B[b++];
 7aa:	83 7d dc 0f          	cmp    DWORD PTR [rbp-0x24],0xf
 7ae:	0f 8f 0f ff ff ff    	jg     6c3 <main._omp_fn.1+0x173>
 7b4:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
 7b7:	8d 50 01             	lea    edx,[rax+0x1]
 7ba:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
 7bd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
 7c0:	8d 4a 01             	lea    ecx,[rdx+0x1]
 7c3:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
 7c6:	48 63 d2             	movsxd rdx,edx
 7c9:	48 8d 0c 95 00 00 00 	lea    rcx,[rdx*4+0x0]
 7d0:	00 
 7d1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
 7d5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
 7d9:	48 01 ca             	add    rdx,rcx
 7dc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
 7de:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
 7e2:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
 7e6:	48 98                	cdqe   
 7e8:	89 0c 82             	mov    DWORD PTR [rdx+rax*4],ecx
 7eb:	e9 a2 fe ff ff       	jmp    692 <main._omp_fn.1+0x142>
	for(k=0;k<x;k++) {
		int ind = inds[k];
		a = bs(A,C[ind],HN,0);
		b = bs(B,C[ind],HN,0);
		if(A[a] == C[ind]) a++;
		if(B[b] == C[ind]) b++;
 7f0:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
 7f4:	e9 94 fe ff ff       	jmp    68d <main._omp_fn.1+0x13d>
	#pragma omp parallel for private(a,b)
	for(k=0;k<x;k++) {
		int ind = inds[k];
		a = bs(A,C[ind],HN,0);
		b = bs(B,C[ind],HN,0);
		if(A[a] == C[ind]) a++;
 7f9:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
 7fd:	e9 58 fe ff ff       	jmp    65a <main._omp_fn.1+0x10a>
 802:	b8 00 00 00 00       	mov    eax,0x0
 807:	83 c1 01             	add    ecx,0x1
 80a:	e9 99 fd ff ff       	jmp    5a8 <main._omp_fn.1+0x58>
	printf("Result (seg'd):  ");
	printarr(C,N);

	int a;
	int b;
	#pragma omp parallel for private(a,b)
 80f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
 813:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
 81a:	00 00 
 81c:	74 05                	je     823 <main._omp_fn.1+0x2d3>
 81e:	e8 00 00 00 00       	call   823 <main._omp_fn.1+0x2d3>
 823:	48 83 c4 30          	add    rsp,0x30
 827:	5b                   	pop    rbx
 828:	41 5c                	pop    r12
 82a:	5d                   	pop    rbp
 82b:	c3                   	ret    

000000000000082c <main._omp_fn.0>:
	printarr(B,HN);

	int ind;
	int inds[x];

	#pragma omp parallel for private(ind)
 82c:	55                   	push   rbp
 82d:	48 89 e5             	mov    rbp,rsp
 830:	41 54                	push   r12
 832:	53                   	push   rbx
 833:	48 83 ec 30          	sub    rsp,0x30
 837:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
 83b:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 842:	00 00 
 844:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
 848:	31 c0                	xor    eax,eax
 84a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 84e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
 852:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
 856:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 85a:	8b 58 28             	mov    ebx,DWORD PTR [rax+0x28]
 85d:	e8 00 00 00 00       	call   862 <main._omp_fn.0+0x36>
 862:	41 89 c4             	mov    r12d,eax
 865:	e8 00 00 00 00       	call   86a <main._omp_fn.0+0x3e>
 86a:	89 c7                	mov    edi,eax
 86c:	8d 43 1f             	lea    eax,[rbx+0x1f]
 86f:	99                   	cdq    
 870:	f7 fb                	idiv   ebx
 872:	89 c6                	mov    esi,eax
 874:	89 f0                	mov    eax,esi
 876:	99                   	cdq    
 877:	41 f7 fc             	idiv   r12d
 87a:	89 c1                	mov    ecx,eax
 87c:	89 f0                	mov    eax,esi
 87e:	99                   	cdq    
 87f:	41 f7 fc             	idiv   r12d
 882:	89 d0                	mov    eax,edx
 884:	39 c7                	cmp    edi,eax
 886:	0f 8c e1 00 00 00    	jl     96d <main._omp_fn.0+0x141>
 88c:	0f af f9             	imul   edi,ecx
 88f:	89 fa                	mov    edx,edi
 891:	01 d0                	add    eax,edx
 893:	8d 14 08             	lea    edx,[rax+rcx*1]
 896:	39 d0                	cmp    eax,edx
 898:	0f 8d dc 00 00 00    	jge    97a <main._omp_fn.0+0x14e>
 89e:	0f af c3             	imul   eax,ebx
 8a1:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
 8a4:	0f af d3             	imul   edx,ebx
 8a7:	41 89 d4             	mov    r12d,edx
	for(k=0;k<N;k+=x) {
		ind = k > HNM ? bs(A,big[k],HN,0) + k-HN : bs(B,big[k],HN,0) + k;
 8aa:	83 7d d8 0f          	cmp    DWORD PTR [rbp-0x28],0xf
 8ae:	0f 8f 80 00 00 00    	jg     934 <main._omp_fn.0+0x108>
 8b4:	eb 4b                	jmp    901 <main._omp_fn.0+0xd5>
 8b6:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
		C[ind] = big[k];
 8b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 8bd:	48 8b 00             	mov    rax,QWORD PTR [rax]
 8c0:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
 8c3:	48 63 d2             	movsxd rdx,edx
 8c6:	8b 0c 90             	mov    ecx,DWORD PTR [rax+rdx*4]
 8c9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 8cd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
 8d1:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
 8d4:	48 63 d2             	movsxd rdx,edx
 8d7:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
		inds[k/x] = ind;
 8da:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 8de:	8b 70 28             	mov    esi,DWORD PTR [rax+0x28]
 8e1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
 8e4:	99                   	cdq    
 8e5:	f7 fe                	idiv   esi
 8e7:	89 c2                	mov    edx,eax
 8e9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 8ed:	48 63 d2             	movsxd rdx,edx
 8f0:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
 8f3:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
 8f6:	01 5d d8             	add    DWORD PTR [rbp-0x28],ebx
 8f9:	44 39 65 d8          	cmp    DWORD PTR [rbp-0x28],r12d
 8fd:	7c ab                	jl     8aa <main._omp_fn.0+0x7e>
 8ff:	eb 79                	jmp    97a <main._omp_fn.0+0x14e>
	int ind;
	int inds[x];

	#pragma omp parallel for private(ind)
	for(k=0;k<N;k+=x) {
		ind = k > HNM ? bs(A,big[k],HN,0) + k-HN : bs(B,big[k],HN,0) + k;
 901:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 905:	48 8b 00             	mov    rax,QWORD PTR [rax]
 908:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
 90b:	48 63 d2             	movsxd rdx,edx
 90e:	8b 34 90             	mov    esi,DWORD PTR [rax+rdx*4]
 911:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 915:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
 919:	b9 00 00 00 00       	mov    ecx,0x0
 91e:	ba 10 00 00 00       	mov    edx,0x10
 923:	48 89 c7             	mov    rdi,rax
 926:	e8 00 00 00 00       	call   92b <main._omp_fn.0+0xff>
 92b:	89 c2                	mov    edx,eax
 92d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
 930:	01 d0                	add    eax,edx
 932:	eb 82                	jmp    8b6 <main._omp_fn.0+0x8a>
 934:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 938:	48 8b 00             	mov    rax,QWORD PTR [rax]
 93b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
 93e:	48 63 d2             	movsxd rdx,edx
 941:	8b 34 90             	mov    esi,DWORD PTR [rax+rdx*4]
 944:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 948:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
 94c:	b9 00 00 00 00       	mov    ecx,0x0
 951:	ba 10 00 00 00       	mov    edx,0x10
 956:	48 89 c7             	mov    rdi,rax
 959:	e8 00 00 00 00       	call   95e <main._omp_fn.0+0x132>
 95e:	89 c2                	mov    edx,eax
 960:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
 963:	01 d0                	add    eax,edx
 965:	83 e8 10             	sub    eax,0x10
 968:	e9 49 ff ff ff       	jmp    8b6 <main._omp_fn.0+0x8a>
 96d:	b8 00 00 00 00       	mov    eax,0x0
 972:	83 c1 01             	add    ecx,0x1
 975:	e9 12 ff ff ff       	jmp    88c <main._omp_fn.0+0x60>
	printarr(B,HN);

	int ind;
	int inds[x];

	#pragma omp parallel for private(ind)
 97a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
 97e:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
 985:	00 00 
 987:	74 05                	je     98e <main._omp_fn.0+0x162>
 989:	e8 00 00 00 00       	call   98e <main._omp_fn.0+0x162>
 98e:	48 83 c4 30          	add    rsp,0x30
 992:	5b                   	pop    rbx
 993:	41 5c                	pop    r12
 995:	5d                   	pop    rbp
 996:	c3                   	ret    
